#!/usr/bin/env python

"""
Combine individual zbest files into a single zcatalog

NOTE: this could get factored out into script vs. algorithm vs. I/O, but
that would obfuscate the current short simplicity of this script.  Do that
refactor if we find that we have to generate zcatalog data outside of the
context of this script.

Stephen Bailey
Lawrence Berkeley National Lab
Fall 2015
"""

from __future__ import absolute_import, division, print_function

import sys, os
import numpy as np
from astropy.table import Table, vstack
from desiutil.log import get_logger,DEBUG
from desispec import io

import argparse

from numpy.lib.recfunctions import append_fields

def match(table1,table2,key="TARGETID") :
    """
    matching two tables
    
    Args:
        table1 : a numpy recarray
        table2 : another numpy recarray
        key : string, the key of the columns to match
    
    Returns joined table
    """
    
    k1=table1[key]
    k2=table2[key]
    d2  =  {v : i for i,v in enumerate(k2)}
    i21 = np.array([d2.get(v,-1) for v in k1]) # not always a match
    ok=(i21>=0)
    for k in table2.dtype.names :
        if k in table1.dtype.names : continue # do not duplicate columns

        #- Special cases of known 2D columns that will fail append_fields
        if k == 'DCHISQ':
            log=get_logger()
            log.warning('Dropping 2D column {}'.format(k))
            continue

        table1=append_fields(table1,k,np.zeros(k1.size).astype(table2[k].dtype)) 
        table1[k][ok]=table2[k][i21[ok]] # unmatched values are set the 0 value corresponding to the dtype
    return table1
    

parser = argparse.ArgumentParser(formatter_class=argparse.ArgumentDefaultsHelpFormatter)
parser.add_argument("-i", "--indir",   type=str,  help="input directory")
parser.add_argument("-o", "--outfile", type=str,  help="output file")
parser.add_argument("-v", "--verbose", action="store_true", help="some flag")
parser.add_argument("--match", type=str, nargs="*", help="match other tables (targets,truth...)")
parser.add_argument("--fibermap", action = "store_true", help="add some columns from fibermap stored in zbest files")
parser.add_argument("--spectra-scores", action = "store_true", help="add some columns from scores stored in spectra files (found in same directory as zbest file)")

args = parser.parse_args()


log=get_logger()
if args.verbose :
    log=get_logger(DEBUG)
else :
    log=get_logger()

if args.indir is None:
    log.error('--input directory required')
    sys.exit(1)
    
if args.outfile is None:
    args.outfile = io.findfile('zcatalog')

import fitsio
zbestfiles = sorted(io.iterfiles(args.indir, 'zbest'))
data = list()
for zbestfile in zbestfiles:
    zbest = fitsio.read(zbestfile, 'ZBEST')
    log.debug("{} {}".format(zbestfile, len(zbest)))
    if args.fibermap :
        fibermap = fitsio.read(zbestfile, 'FIBERMAP')
        # new zbest structured array with two more columns ...
        ndtype=np.dtype( zbest.dtype.descr + [
            ("RA", "f8"),
            ("DEC", "f8"),
            ("FLUX_G", "f4"),
            ("FLUX_R", "f4"),
            ("FLUX_Z", "f4"),
            ])
        nzbest=np.zeros(zbest.shape,dtype=ndtype)
        # copy 
        for k in zbest.dtype.names : nzbest[k]=zbest[k]
        # add RA and Dec
        # we have to match the targetids and get a unique set of values
        # because the fibermap can contain several entries for the same target
        tmp1  = {tid : i for i,tid in enumerate(fibermap["TARGETID"])} # if several entries with same targetid, keeps last index
        tmp2  = [tmp1[tid] for tid in nzbest["TARGETID"]]
        if "TARGET_RA" in fibermap.dtype.names:
            #- new format: TARGET_RA/DEC + FLUX
            nzbest["RA"] = fibermap["TARGET_RA"][tmp2]
            nzbest["DEC"] = fibermap["TARGET_DEC"][tmp2]
            nzbest["FLUX_G"] = fibermap["FLUX_G"][tmp2]
            nzbest["FLUX_R"] = fibermap["FLUX_R"][tmp2]
            nzbest["FLUX_Z"] = fibermap["FLUX_Z"][tmp2]
        else:
            #- old format: RA/DEC_TARGET + MAG
            nzbest["RA"] = fibermap["RA_TARGET"][tmp2]
            nzbest["DEC"] = fibermap["DEC_TARGET"][tmp2]
            nzbest["FLUX_G"] = 10**(0.4*(22.5 - fibermap["MAG"][:,0][tmp2]))
            nzbest["FLUX_R"] = 10**(0.4*(22.5 - fibermap["MAG"][:,1][tmp2]))
            nzbest["FLUX_Z"] = 10**(0.4*(22.5 - fibermap["MAG"][:,2][tmp2]))

        zbest=nzbest


    if args.spectra_scores :
        specfile=os.path.join(os.path.dirname(zbestfile),os.path.basename(zbestfile).replace("zbest","spectra"))
        scores = fitsio.read(specfile, 'SCORES')
        newtypes=[]
        for k in scores.dtype.names :
             newtypes.append((k,"f4"))
        ndtype=np.dtype( zbest.dtype.descr + newtypes )
        nzbest=np.zeros(zbest.shape,dtype=ndtype)
        for k in zbest.dtype.names : nzbest[k]=zbest[k]
        tmp1  = {tid : i for i,tid in enumerate(fibermap["TARGETID"])} # if several entries with same targetid, keeps last index
        tmp2  = [tmp1[tid] for tid in nzbest["TARGETID"]]
        for k in scores.dtype.names :
            nzbest[k] = scores[k][tmp2]
        zbest=nzbest

    data.append(zbest)
   

zcat = np.hstack(data)


if args.match:
    for filename in args.match :
        log.info("matching {}".format(filename))
        zcat = match(zcat,fitsio.read(filename))

header = fitsio.read_header(zbestfiles[0], 0)

fitsio.write(args.outfile, zcat, header=header, extname='ZCATALOG', clobber=True)
log.info("wrote {}".format(args.outfile))





